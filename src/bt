#!/usr/bin/env perl

# Perl Test

use strict;
use warnings;

use Cwd;
use File::Spec::Functions qw(rel2abs);

sub uniq { my %h; undef @h{@_}; keys %h }

my $me = (split m{/}, $0)[-1];

my $cover = grep /^--cover$/, @ARGV; # ignored if running natively on Linux
my $noselect = grep /^--no-select$/, @ARGV;
my $maketest = grep /^--make-test$/, @ARGV;
@ARGV = grep !/^--(?:cover|no-select|make-test)$/, @ARGV xor $maketest
    or die <<"EOU";
Usage:
    $me <filename>... [--no-select] [--cover] | <--make-test>
EOU

my $gitroot;
$gitroot = eval { `git rev-parse --show-toplevel` };
chomp $gitroot;
die "$me: Unsupported working directory or `git` not on \$PATH!\n"
    if $@ or not $gitroot;

chdir $gitroot;

if ($^O ne 'linux') {
    local $" = ' ';
    exec qw(docker/bin/bt-run make), $cover ? 'cover' : 'test-verbose',
         $maketest ? () : "TESTS=@ARGV";
}

$_ = rel2abs $_ foreach @ARGV;

system qw(find . -type d -name cover_db -exec rm -rf {} +);

$ENV{PERL_UNICODE} = 'SDA';
$ENV{PERL5LIB} = join ':',
       "$gitroot/lib/perl5",
       "$gitroot/t/lib",
        $ENV{PERL5LIB};
$ENV{HARNESS_PERL_SWITCHES} =
    '-MDevel::Cover=-coverage,statement,branch,condition,subroutine,time';

if ($maketest) {
    system qw(make test);
    exec   qw(cover -ignore_re ^t/|.*\.t$|/Acme/Test/);
}

my @moose_tests;
foreach (@ARGV) {
    $_ =~ m{^.*?/Acme/(.*)\.pm$} or next;
    my $test_dir = "$gitroot/t/lib/TestsFor/Acme/$1/";
    push @moose_tests, $_ if -e "$test_dir/base.pm" or -e "$test_dir/legacy.pm";
}

s{^(.*/)?(.*)\.pm$}{${\($1 // '')}t/$2.t} foreach @ARGV;

my @no_t_files = grep !-e ($_), @ARGV;

foreach (@no_t_files) {
    s{\.t$}{}, s{/t/}{/}, s{^.*?/Acme/}{::}, s{/}{::}g;
    $_ = "Acme$_";
}

my %dedup;
@dedup{
    map {
        my $test = $_;
        $test =~ s{^(.*/)?(.*)\.pm$}{${\($1 // '')}t/$2.t};
        $test;
    } @moose_tests
} = ();
my @t_files = grep -e ($_) && !exists $dedup{$_}, @ARGV;

foreach (@moose_tests) {
    s{\.pm$}{}, s{^.*?/Acme/}{::}g, s{/}{::}g;
    $_ = "Acme$_";
}

my @prove = qw(prove -v);

system @prove, @t_files if @t_files;

if (@no_t_files or @moose_tests) {
    system @prove, qw(t/test_classes.t ::), $_
        foreach uniq @no_t_files, @moose_tests;
}

s{/t/}{/}, s{^$gitroot/}{}, s{\.t$}{\.pm} foreach @ARGV;
system 'cover', ( $noselect ? qw(-ignore_re ^t/|.*\.t$|/Acme/Test/)
            : ('-select_re', '^'.( join '|', map(quotemeta, @ARGV) ).'$') );
