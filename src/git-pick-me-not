#!/usr/bin/env perl

use strict;
use warnings;

use IPC::Run qw(run);

my $me = (split m{/}, $0)[-1];

die "Usage:\n\t$me <branch-name> <first-commit-in-range>\n" if @ARGV != 2;

my ($branch, $lasthash) = @ARGV;

run [qw(git log), "$lasthash..$branch", qw(--format=%H)], '>', \my $commits
    or die "$me: Could not get logs!\n";

for my $commit (reverse split /\s+/, $commits) {
    print "\n$commit\n";

    run [qw(git diff-tree --no-commit-id --name-only -r), $commit], '>',
        \my $files;

    if ($files =~ /keyword/i) {
        print "$commit not cherry-picked! File list:\n$files";
        next;
    }

    run [qw(git show -s --format=%B), $commit], '>', \my $commit_msg;
    my $is_cherry_pick = $commit_msg =~ /\bcherry picked from commit\b/;

    my $cp_success = run [qw(git cherry-pick), ($is_cherry_pick ? () : qw(-x)),
                          $commit], \undef, \my $cp_msg_out, \my $cp_msg_err;

    if ($cp_msg_err =~ /\bcherry-pick is now empty\b/i) {
        print "$commit is empty!\n";
        $cp_success = run [qw(git reset)];
    } else {
        print "$cp_msg_out$cp_msg_err";
    }

    last unless $cp_success;
}

__END__

=head1 USAGE

    git-pick-me-not origin/master <last-cherry-picked-commit-hash>

=cut
