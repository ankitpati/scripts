#!/usr/bin/env bash

# A customized Bash environment suitable for Git work.
#
# Copyright (c) 2008 Ryan Tomayko <http://tomayko.com/>
# Copyright (c) 2008 Aristotle Pagaltzis <http://plasmasturm.org/>
# Copyright (c) 2023 Ankit Pati <https://ankitpati.in/>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
# Distributed under the GNU General Public License, version 2.0.

function gitsh_load_aliases {
    local -rA alias_configs=(
        [a]='add'
        [aa]='add --update'
        [amend]='commit --verbose --amend'
        [ap]='add --patch'
        [b]='branch'
        [c]='checkout'
        [ca]='commit --verbose --all'
        [ci]='commit --verbose'
        [d]='diff'
        [ds]='diff --stat'
        [f]='fetch --prune'
        [hard]='reset --hard'
        [k]='cherry-pick'
        [l]='log --pretty=oneline --abbrev-commit'
        [n]='commit --verbose --amend'
        [p]='diff --cached'
        [peek]='log --patch --max-count=1'
        [pm]='pull'
        [pop]='reset --soft HEAD^'
        [pr]='pull --rebase'
        [r]='remote'
        [re]='rebase --interactive'
        [s]='commit --dry-run --short'
        [scrap]='checkout HEAD'
        [soft]='reset --soft'
        [stage]='add'
        [t]='diff --cached'
        [unstage]='reset HEAD'
        [wt]='worktree'
    )

    local gitsh_alias
    for gitsh_alias in "${!alias_configs[@]}"
    do
        local invocation=${alias_configs[$gitsh_alias]}
        local subcommand=${invocation%% *}
        alias "$gitsh_alias"="git $invocation"
        __git_complete "$gitsh_alias" "_git_${subcommand//-/_}"
    done
}

function gitsh_load_completions {
    local -rA completion_configs=(
        [add]='a'
        [am]='as'
        [annotate]='a'
        [apply]='as'
        [archive]='a'
        [bisect]='as'
        [blame]='a'
        [branch]='as'
        [bundle]='s'
        [cat-file]='a'
        [check-ignore]='a'
        [checkout]='as'
        [cherry-pick]='as'
        [clean]='a'
        [clone]='a'
        [commit]='as'
        [config]='as'
        [describe]='as'
        [diff]='as'
        [difftool]='a'
        [fetch]='as'
        [flow]='a'
        [format-patch]='as'
        [fsck]='a'
        [gui]='a'
        [hash-object]='a'
        [init]='a'
        [instaweb]='a'
        [log]='al'
        [lost-found]='a'
        [ls-files]='a'
        [ls-remote]='as'
        [ls-tree]='as'
        [merge-base]='as'
        [merge]='as'
        [mergetool]='a'
        [patch-id]='a'
        [peek-remote]='a'
        [prune]='a'
        [pull]='as'
        [push]='as'
        [quiltimport]='a'
        [rebase]='as'
        [reflog]='a'
        [remote]='as'
        [repack]='a'
        [repo-config]='a'
        [request-pull]='a'
        [reset]='as'
        [restore]='a'
        [rev-list]='a'
        [rev-parse]='a'
        [revert]='a'
        [send-email]='a'
        [send-pack]='a'
        [shortlog]='as'
        [show-branch]='al'
        [show]='as'
        [stash]='as'
        [status]='a'
        [stripspace]='a'
        [submodule]='as'
        [svn]='as'
        [switch]='a'
        [symbolic-ref]='a'
        [tag]='as'
        [tar-tree]='a'
        [var]='a'
        [whatchanged]='al'
        [worktree]='as'
    )

    local subcommand
    for subcommand in "${!completion_configs[@]}"
    do
        local completion_config=${completion_configs[$subcommand]}

        local completion_index
        for (( completion_index=0; completion_index < ${#completion_config}; ++completion_index ))
        do
            local completion_type=${completion_config:completion_index:1}
            case $completion_type in
                a)
                    # alias
                    alias "$subcommand"="git $subcommand"
                    ;;
                s)
                    # standard completion
                    __git_complete "$subcommand" "_git_${subcommand//-/_}"
                    ;;
                l)
                    # log completion
                    __git_complete "$subcommand" _git_log
                    ;;
            esac
        done
    done
}

function gitsh_headname {
    headname=$(git symbolic-ref --quiet HEAD 2>/dev/null)

    if [[ -n $headname ]]
    then
        headname=${headname#refs/heads/}
    else
        headname=$(git rev-parse --short HEAD 2>/dev/null)
    fi

    gitsh_apply_color headname 'yellow reverse'
}

function gitsh_upstream_state {
    # find how many commits we are ahead/behind our upstream
    local count=$(git rev-list --count --left-right '@{upstream}'...HEAD 2>/dev/null)
    count=${count//$'\t'/ }

    case $count in
        '')
            # no upstream
            upstream_state=''
            ;;
        '0 0')
            # equal to upstream
            upstream_state=' u='
            ;;
        '0 '*)
            # ahead of upstream
            upstream_state=" u+${count#0 }"
            ;;
        *' 0')
            # behind upstream
            upstream_state=" u-${count% 0}"
            ;;
        *)
            # diverged from upstream
            upstream_state=" u+${count#* }-${count% *}"
            ;;
    esac

    gitsh_apply_color upstream_state 'yellow bold'
}

function gitsh_repo_state {
    local -r git_dir=$(git rev-parse --git-dir 2>/dev/null)

    if [[ -d $git_dir/rebase-merge || -d $git_dir/rebase-apply ]]
    then
        state_marker='(rebase)'
    elif [[ -f $git_dir/MERGE_HEAD ]]
    then
        state_marker='(merge)'
    elif [[ -f $git_dir/CHERRY_PICK_HEAD ]]
    then
        state_marker='(cherry-pick)'
    else
        return 0
    fi

    gitsh_apply_color state_marker red
}

function gitsh_workdir {
    local subdir=$(git rev-parse --show-prefix 2>/dev/null)
    subdir=${subdir%/}

    workdir=${PWD%/"$subdir"}
    workdir="${workdir/*\/}${subdir:+/$subdir}"

    gitsh_apply_color workdir 'blue bold'
}

function gitsh_dirty {
    if ! git rev-parse --verify HEAD >/dev/null 2>&1
    then
        return 0
    fi

    if ! git diff --quiet 2>/dev/null
    then
        dirty_marker=' *'
        gitsh_apply_color dirty_marker red
    elif ! git diff --staged --quiet 2>/dev/null
    then
        dirty_marker=' *'
        gitsh_apply_color dirty_marker yellow
    else
        return 0
    fi
}

function gitsh_dirty_stash {
    if ! git rev-parse --verify refs/stash >/dev/null 2>&1
    then
        return 0
    fi

    dirty_stash_marker=' $'
    gitsh_apply_color dirty_stash_marker red
}

function gitsh_apply_color {
    local -n output=$1
    local -r color_name=$2

    case $color_name in
        'blue bold')
            ansi_color='\[\e[1;34m\]'
            ;;
        'red')
            ansi_color='\[\e[31m\]'
            ;;
        'yellow bold')
            ansi_color='\[\e[1;33m\]'
            ;;
        'yellow reverse')
            ansi_color='\[\e[7;33m\]'
            ;;
        'yellow')
            ansi_color='\[\e[33m\]'
            ;;
    esac

    local -r ansi_reset='\[\e[m\]'

    output="$ansi_color$output$ansi_reset"
}

function gitsh_prompt {
    local -n output=$1

    local headname
    gitsh_headname

    local upstream_state
    gitsh_upstream_state

    local state_marker
    gitsh_repo_state

    local workdir
    gitsh_workdir

    local dirty_marker
    gitsh_dirty

    local dirty_stash_marker
    gitsh_dirty_stash

    output="$headname$upstream_state"'!'"$state_marker$workdir$dirty_marker$dirty_stash_marker> "
}

function gitsh_main {
    if [[ -n $GITSH_MAIN_SOURCED ]]
    then
        return 0
    fi

    readonly GITSH_MAIN_SOURCED=1

    if ! command -v __git_complete &>/dev/null
    then
        _comp_load -D -- git
    fi

    gitsh_load_aliases
    unset -f gitsh_load_aliases

    gitsh_load_completions
    unset -f gitsh_load_completions
}

gitsh_main
unset -f gitsh_main
