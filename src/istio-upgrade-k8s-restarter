#!/usr/bin/env bash

set -euo pipefail
shopt -s extglob

old_revision='1-17-0'

mapfile -t daemonsets < <(kubectl get daemonsets --all-namespaces --output=json | jq --raw-output .items[].metadata.name)
mapfile -t deployments < <(kubectl get deployments --all-namespaces --output=json | jq --raw-output .items[].metadata.name)
mapfile -t statefulsets < <(kubectl get statefulsets --all-namespaces --output=json | jq --raw-output .items[].metadata.name)

declare -A objects_to_restart

while read -r pod
do
    rollout_object="${pod/%.+([^.])}"
    namespace="${pod/#+([^.]).}"

    longest_prefix_match=''
    longest_prefix_type=''
    shortest_postfix_length=$((2**15))

    for daemonset in "${daemonsets[@]}"
    do
        postfix="${rollout_object/#"$daemonset"}"
        if ((${#postfix} != ${#rollout_object} && ${#postfix} < shortest_postfix_length))
        then
            longest_prefix_match="$daemonset"
            longest_prefix_type='daemonset'
            shortest_postfix_length="${#postfix}"
        fi
    done

    for deployment in "${deployments[@]}"
    do
        postfix="${rollout_object/#"$deployment"}"
        if ((${#postfix} != ${#rollout_object} && ${#postfix} < shortest_postfix_length))
        then
            longest_prefix_match="$deployment"
            longest_prefix_type='deployment'
            shortest_postfix_length="${#postfix}"
        fi
    done

    for statefulset in "${statefulsets[@]}"
    do
        postfix="${rollout_object/#"$statefulset"}"
        if ((${#postfix} != ${#rollout_object} && ${#postfix} < shortest_postfix_length))
        then
            longest_prefix_match="$statefulset"
            longest_prefix_type='statefulset'
            shortest_postfix_length="${#postfix}"
        fi
    done

    objects_to_restart[$longest_prefix_type/$longest_prefix_match --namespace=$namespace]=1
done < <(istioctl proxy-status --revision="$old_revision" | tail --lines=+2 | cut --delimiter=' ' --fields=1)

for object_to_restart in "${!objects_to_restart[@]}"
do
    mapfile -td ' ' args_to_restart < <(printf '%s' "$object_to_restart")
    kubectl rollout restart "${args_to_restart[@]}"
done
