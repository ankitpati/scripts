#!/usr/bin/env perl

use Modern::Perl 2023;
use autodie;

use Cpanel::JSON::XS qw(decode_json encode_json);
use Crypt::JWT       qw(decode_jwt);
use IPC::Run         qw(run);
use MIME::Base64     qw(decode_base64);
use YAML::XS         qw(Load);

## no critic (Variables::ProhibitPackageVars)
$YAML::XS::Boolean = 'JSON::PP';

use constant {
    ## no critic (RegularExpressions::ProhibitComplexRegexes RegularExpressions::ProhibitEnumeratedClasses)
    BASE64_RE => qr{^
        (?:
            [A-Za-z0-9+/]{4}
        )*
        (?:
            [A-Za-z0-9+/]{2}==
            |
            [A-Za-z0-9+/]{3}=
        )?
    $}x,
    NON_COMMON_ASCII_RE => qr{[^\x09\x0a\x0d\x20-\x7e]},
    X509_CERT_RE        => qr{
        ^-----BEGIN[ ]CERTIFICATE-----$
        .*?
        ^-----END[ ]CERTIFICATE-----$
    }smx,
    YAML_RE => qr{(?=.*:)(?=.*\n).*}s,
};

our $VERSION = 1.00;

my $me = (split m{/}, $0)[-1];
die "Usage:\n\t$me < filename.json\n" if @ARGV;

my $json_text;
{
    local $/;
    $json_text = <STDIN>;
}

my $decoded_json = decode_json $json_text;

sub expand {
    my $value_ref = shift;

    if ($$value_ref =~ s/\s//gsr =~ BASE64_RE) {
        my $base64_decoded_value = decode_base64 $$value_ref;

        $$value_ref = $base64_decoded_value
            if $base64_decoded_value !~ NON_COMMON_ASCII_RE;
    }

    my $jwt_decoded_value = eval {
        decode_jwt
            token            => $$value_ref,
            allow_none       => 1,
            ignore_signature => 1,
            decode_payload   => 1,
            ignore_claims    => 1,
            ;
    };

    if (defined $jwt_decoded_value) {
        walk ($jwt_decoded_value);
        $$value_ref = $jwt_decoded_value;
    } else {
        my $json_decoded_value = eval { decode_json $$value_ref };

        if (defined $json_decoded_value) {
            walk ($json_decoded_value);
            $$value_ref = $json_decoded_value;
        } elsif ($$value_ref =~ YAML_RE) {
            my $yaml_decoded_value = eval { Load $$value_ref };

            if (defined $yaml_decoded_value) {
                walk ($yaml_decoded_value);
                $$value_ref = $yaml_decoded_value;
            }
        }
    }

    $$value_ref =~ s/(${\(X509_CERT_RE)})/
        run [qw(openssl x509 -text -noout)], '<', \$1, '>', \my $cert_as_text;
        $cert_as_text;
    /eg;

    return;
}

sub walk {
    my $json_value = shift;

    if ('ARRAY' eq ref $json_value) {
        foreach my $index (0 .. $#$json_value) {
            my $value = $json_value->[$index];

            my $ref = ref $value;

            if ('ARRAY' eq $ref or 'HASH' eq $ref) {
                walk ($value);
            } elsif ('' eq $ref) {
                expand \($json_value->[$index]);
            }
        }
    } elsif ('HASH' eq ref $json_value) {
        while (my ($key, $value) = each %$json_value) {
            my $ref = ref $value;

            if ('ARRAY' eq $ref or 'HASH' eq $ref) {
                walk ($value);
            } elsif ('' eq $ref) {
                expand \($json_value->{$key});
            }
        }
    }

    return;
}

walk $decoded_json;

say encode_json $decoded_json;
