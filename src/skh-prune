#!/usr/bin/env perl
# Prune SSH Known Hosts

use strict;
use warnings;
use autodie;

use List::Util qw(uniq);

our $VERSION = 2.00;

# UTF8 for File Handles and Command Line Arguments
use open qw(:std :utf8);
use Encode qw(decode);
local @ARGV = map { decode 'UTF-8', $_ } @ARGV unless utf8::is_utf8 $ARGV[0];

# get filenames as arguments, or fallback to sensible defaults
@ARGV or local @ARGV = ("$ENV{HOME}/.ssh/known_hosts");

# precedence order (high to low) in case of multiple public keys for a host
my @algo_precedence = qw(
    ssh-ed25519
    ecdsa-sha2-nistp521
    ecdsa-sha2-nistp256
    ssh-rsa
);

foreach my $skhfile (@ARGV) {
    open my $fin, '<', $skhfile;
    my @lines = <$fin>;
    close $fin;

    my %algo_host_key;
    foreach my $line (@lines) {
        my ($hosts, $algo, $key) = split /\s+/, $line; # comments are lost
        $algo_host_key{$algo}{$_} = $key foreach split /,/, $hosts;
    }

    my %host_algokey;
    foreach my $algo (@algo_precedence) {
        while (my ($host, $key) = each %{ $algo_host_key{$algo} }) {
            $host_algokey{$host} = "$algo $key"
                unless exists $host_algokey{$host};
                    # more performant than the `reverse @algos` variant
        }
    }

    my %algokey_hosts;
    while (my ($host, $algokey) = each %host_algokey) {
        push @{ $algokey_hosts{$algokey} }, $host;
    }

    my @known_hosts =
        map { ( join ',', sort &uniq (@{$algokey_hosts{$_}}) ) . " $_" }
            sort keys %algokey_hosts;

    open my $fout, '>', $skhfile;
    print $fout (join ("\n", @known_hosts), "\n");
    close $fout;
}

__END__
