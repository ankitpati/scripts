#!/usr/bin/env perl
# Prune SSH Known Hosts

use strict;
use warnings;
use autodie;

use List::Util qw(uniq);

our $VERSION = 2.00;

# UTF8 for File Handles and Command Line Arguments
use open qw(:std :utf8);
use Encode qw(decode);
local @ARGV = map { decode 'UTF-8', $_ } @ARGV unless utf8::is_utf8 $ARGV[0];

use constant {
    # The regexes below are specific to the `known_hosts` format,
    # and MUST NOT be used in any other context!
    #
    # Do NOT replace `[0-9]` and other pure ASCII items with
    # named character classes. We need ASCII, not Unicode!

    HOSTPORT2HOST_RE => qr/^ \[? ([^]]+) \]? /x,
    HOST_IS_IP_RE    => qr/^ (?:[0-9]+\.){3} [0-9]+ $ | :/x, # covers IPv4 & IPv6
};

# get filenames as arguments, or fallback to sensible defaults
@ARGV or local @ARGV = ("$ENV{HOME}/.ssh/known_hosts");

# precedence order (high to low) in case of multiple public keys for a host
my $precedence = 0;
my %algo_precedence = map { $_ => $precedence++ } qw(
    ssh-ed25519
    ecdsa-sha2-nistp521
    ecdsa-sha2-nistp256
    ssh-rsa
);

sub _non_ip_hosts {
    my ($host_without_port) = $_ =~ HOSTPORT2HOST_RE;
    return $host_without_port !~ HOST_IS_IP_RE;
}

foreach my $skhfile (@ARGV) {
    open my $fin, '<', $skhfile;
    my @lines = <$fin>;
    close $fin;

    my %host_algo_key;
    foreach my $line (@lines) {
        my ($hosts, $algo, $key) = split /\s+/, $line; # comments are lost

        my @hosts = split /,/, $hosts;
        my @non_ip_hosts = grep _non_ip_hosts, @hosts;
        @hosts = @non_ip_hosts if @non_ip_hosts;

        foreach my $host (@hosts) {
            # unlisted algos get a random non-conflicting precedence
            $algo_precedence{$algo} = $precedence++
                unless exists $algo_precedence{$algo};

            $host_algo_key{$host} = [$algo, $key]
                if not exists $host_algo_key{$host} or
                    $algo_precedence{ $algo } <
                    $algo_precedence{ $host_algo_key{$host}[0] };
        }
    }

    my %algokey_hosts;
    while (my ($host, $algo_key) = each %host_algo_key) {
        local $" = ' ';
        push @{ $algokey_hosts{"@$algo_key"} }, $host;
    }

    my @known_hosts =
        map { ( join ',', sort &uniq (@{$algokey_hosts{$_}}) ) . " $_" }
            sort keys %algokey_hosts;

    open my $fout, '>', $skhfile;
    print $fout (join ("\n", @known_hosts), "\n");
    close $fout;
}

__END__
